##################################################################
# @author majinjie
# @created 2025-4-4
# @changed 2025-6-22
# @version tmux 3.5a
#
# See: https://github.com/tmux/tmux/wiki/Getting-Started
##################################################################

#######################################################################
#                                                                     #
#                             plugins                                 #
#                                                                     #
#######################################################################
# {{{

# }}}

#######################################################################
#                                                                     #
#                             options                                 #
#                                                                     #
#######################################################################
# {{{
set -g prefix "C-,"
#  NOTE: 如果设置为on，则在浮动会话中无法传递tmux快捷键。设置为always，则可以。
set -s extended-keys        always

# supports: tmux-256color screen-256color
# tmux-256color: new, 256color + RGB + ...
# screen-256color: old, only 256color
set -g default-terminal "tmux-256color"

set -ga terminal-features 'foot:osc7,foot:extkeys'

#  HACK: 当设置term=foot时，告诉tmux支持24bit色
set -ga terminal-overrides 'foot:Tc' 

set -g base-index 1
set -g pane-base-index 1

set -s buffer-limit 100
set -s focus-events on
set -s set-clipboard  off
set -s escape-time 10
set -g display-panes-time 2000
set -g display-time 2000
set -g history-limit 2000
set -g mode-keys vi
set -g status-keys emacs
set -g mouse on
set -g renumber-windows on
set -g set-titles on
set -s exit-empty on
set -g history-file ~/.local/share/tmux/history

set -g visual-activity off
set -g visual-bell off
set -g visual-silence on

set -g allow-passthrough on

set -g @float-session-width "70%"
set -g @float-session-height "80%"

# See:https://man.openbsd.org/OpenBSD-current/man1/tmux.1#FORMATS
# }}}

#######################################################################
#                                                                     #
#                             theme                                   #
#                                                                     #
#######################################################################
# {{{
# Catppuccin Mocha
%hidden none="NONE"
%hidden bg="#1a1b26"
%hidden bg_dark="#16161e"
%hidden bg_highlight="#292e42"
%hidden terminal_black="#414868"
%hidden fg="#c0caf5"
%hidden fg_dark="#a9b1d6"
%hidden fg_gutter="#3b4261"
%hidden dark3="#545c7e"
%hidden comment="#565f89"
%hidden dark5="#737aa2"
%hidden blue0="#3d59a1"
%hidden blue="#7aa2f7"
%hidden cyan="#7dcfff"
%hidden blue1="#2ac3de"
%hidden blue2="#0db9d7"
%hidden blue5="#89ddff"
%hidden blue6="#b4f9f8"
%hidden blue7="#394b70"
%hidden magenta="#bb9af7"
%hidden magenta2="#ff007c"
%hidden purple="#9d7cd8"
%hidden orange="#ff9e64"
%hidden yellow="#e0af68"
%hidden green="#9ece6a"
%hidden green1="#73daca"
%hidden green2="#41a6b5"
%hidden teal="#1abc9c"
%hidden red="#f7768e"
%hidden red1="#db4b4b"
%hidden white="#ffffff"

set -g display-panes-active-colour "$blue"
set -g display-panes-colour        "$comment"

set -g message-style         "fg=$white,bold"                 # set stl msg style. used for msgs & command prompt
set -gF message-command-style "#{message-style}"           # appearance of status message cmds

# pane border
set -g pane-border-status off
set -g pane-border-lines heavy
set -g pane-border-format \
"#[align=right] #{pane_current_command}  #{s|^$HOME|~:pane_current_path}\
 #S:#I.#P "

set -g pane-border-style \
    '#{?pane_in_mode,fg=#{yellow},\
    #{?pane_synchronized,fg=#{red},\
    #{?pane_marked,fg=#{magenta},\
    fg=#{comment}}}}'  
set -g pane-active-border-style \
    '#{?pane_in_mode,fg=#{yellow},\
    #{?pane_synchronized,fg=#{red},\
    fg=#{blue}}},bold'  


# popup border
set -g popup-border-lines rounded

set -g popup-border-style "fg=$comment"


# status bar
set -g status off
set -g status-position bottom
set -g status-justify centre
set -g status-interval 10
set -g status-keys emacs

set -g status-left "#S"
set -g status-left-length 20
set -g window-status-separator ' '
set -g status-right "T:#{client_key_table}"
set -g status-right-length 40


set -g status-bg $bg

set -g status-left-style "fg=$green,bold"
set -g window-status-style "fg=$fg"
set -g window-status-current-style "fg=$purple,bold"
set -g window-status-last-style "fg=$fg,bold"
set -g window-status-activity-style "bg=$blue"
set -g window-status-bell-style     "bg=$red1"
set -g status-right-style "fg=$green2,bold"

# }}}

#######################################################################
#                                                                     #
#                             keymaps                                 #
#                                                                     #
#######################################################################
# {{{

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ root ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
bind -T root -N 'Split window right' 'C-S-|' splitw -h -c '#{pane_current_path}'
bind -T root -N 'Split window down' 'C-S-_' splitw -v  -c '#{pane_current_path}'
bind -T root -N "Zoom the active pane" 'C-S-+' resizep -Z
# bind -T root -N "Kill current pane" 'C-S-DC' kill-pane

bind -T root -N 'Select the last window' 'C-\' selectw -l
bind -T root -N 'Switch the last session' 'C-Tab' switchc -l

bind -T root -N "Create new window or Attach to exists window" "C-'" command-prompt -T window-target -p "window:" "run \"~/.config/tmux/scripts/focus-or-new-window '%%'\""

bind -T root -N "Prompt for a tmux command" 'C-;' command-prompt
bind -T root -N "Open float session" 'C-.' {
    if -F '#{@float-session-name}' {
        run -bC "popup -E -x C -y C -w #{@float-session-width} -h #{@float-session-height} -d '#{pane_current_path}' \
        '\
        tmux new-session -A -s #{@float-session-name} -n shell \
        '"
    } {
        detach
    }
}

# vim 
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?(-wrapped)?$'"
is_others="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?(fzf|atuin)$'"
bind -T root -N "Navigate to left"    'C-h' if "$is_vim || $is_others" 'send C-h'   { if -F '#{pane_at_left}' '' 'select-pane -L' } 
bind -T root -N "Navigate to bottom"  'C-j' if "$is_vim || $is_others" 'send C-j'   { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind -T root -N "Navigate to top"     'C-k' if "$is_vim || $is_others" 'send C-k'   { if -F '#{pane_at_top}' '' 'select-pane -U' }
bind -T root -N "Navigate to right"   'C-l' if "$is_vim || $is_others" 'send C-l'   { if -F '#{pane_at_right}' '' 'select-pane -R' }

bind -T root -N "Navigate to last"    'C-/' if "$is_vim" 'send C-/'   'select-pane -Zl'

bind -T root -N "Resize to left"      'C-S-H' if "$is_vim" 'send C-H' 'resize-pane -L 5'
bind -T root -N "Resize to bottom"    'C-S-J' if "$is_vim" 'send C-J' 'resize-pane -D 5'
bind -T root -N "Resize to top"       'C-S-K' if "$is_vim" 'send C-K' 'resize-pane -U 5'
bind -T root -N "Resize to right"     'C-S-L' if "$is_vim" 'send C-L' 'resize-pane -R 5'

bind -T root -N "Swap to left"      'C-M-h' if "$is_vim" 'send C-M-h' 'swap-pane -s "{left-of}"'
bind -T root -N "Swap to bottom"    'C-M-j' if "$is_vim" 'send C-M-j' 'swap-pane -s "{down-of}"'
bind -T root -N "Swap to top"       'C-M-k' if "$is_vim" 'send C-M-k' 'swap-pane -s "{up-of}"'
bind -T root -N "Swap to right"     'C-M-l' if "$is_vim" 'send C-M-l' 'swap-pane -s "{right-of}"'

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ prefix ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
bind -T prefix -N 'Split window right' l splitw -h -c '#{pane_current_path}'
bind -T prefix -N 'Split window down' j splitw -v  -c '#{pane_current_path}'
bind -T prefix -N 'Split window left' h splitw -bh -c '#{pane_current_path}'
bind -T prefix -N 'Split window up' k splitw -bv -c '#{pane_current_path}'
bind -T prefix -N 'Split window right' L splitw -fh -c '#{pane_current_path}'
bind -T prefix -N 'Split window down' J splitw -fv -c '#{pane_current_path}'
bind -T prefix -N 'Split window left' H splitw -fbh -c '#{pane_current_path}'
bind -T prefix -N 'Split window up' K splitw -fbv -c '#{pane_current_path}'

bind -T prefix -N "Prompt for a tmux command" : command-prompt

bind -T prefix -N "Choose window without float sessions" w choose-tree -Zw -f '#{==:#{m:float-*,#S},0}'
bind -T prefix -N "Choose window" W choose-tree -Zw
bind -T prefix -N "Choose session without float sessions" s choose-tree -Zs -f '#{==:#{m:float-*,#S},0}'
bind -T prefix -N "Choose session" S choose-tree -Zs

bind -T prefix -N "Choose client" c choose-client -Z "switch-client -c '%%'"

bind -T prefix -N "Choose buffer" b choose-buffer -Z
bind -T prefix -N "Choose buffer to clipboard" B choose-buffer -Z "run \"tmux saveb -b '%%' - | wl-copy\""

bind -T prefix -N "Rename window" r command-prompt -p "rename-window:" "renamew '%%'"
bind -T prefix -N "Rename session" R command-prompt -p "rename-session:" "rename '%%'"

bind -T prefix -N "Kill current pane" x kill-pane
bind -T prefix -N "Kill current window" X unlinkw -k
bind -T prefix -N "Kill all except current pane" o kill-pane -a
bind -T prefix -N "Kill all except current window" O kill-window -a

bind -T prefix -N "Detach the current client" d detach-client
bind -T prefix -N "Choose and detach a client from a list" D choose-client -Z

bind -T prefix -N "Enter copy-mode" C-, copy-mode
bind -T prefix -N "Enter copy-mode" , copy-mode

bind -T prefix C-l send C-l

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ copy-mode ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
bind -T copy-mode-vi  -N "Exit copy mode"                 i       send -X cancel
bind -T copy-mode-vi  -N "Exit copy mode"                 a       send -X cancel

bind -T copy-mode-vi  -N "Select word"                    .       send -X select-word
bind -T copy-mode-vi  -N "Start visual selection"         v       send -X begin-selection
bind -T copy-mode-vi  -N "Start visual line"              V       send -X select-line
bind -T copy-mode-vi  -N "Start visual block"             C-v     { send -X rectangle-toggle; send -X begin-selection }

bind -T copy-mode-vi  -N "Copy selection"                 y       send -X copy-pipe "wl-copy" "copy-mode"
bind -T copy-mode-vi  -N "Copy selection without sync"    Y       send -X copy-selection 'copy-mode'
bind -T copy-mode-vi  -N "Append the selection"           A       send -X append-selection

bind -T copy-mode-vi  -N "Set mark"                       m       send -X set-mark
bind -T copy-mode-vi  -N "Goto mark"                      "'"     send -X jump-to-mark

bind -T copy-mode-vi  -N "Forward search"                 /       command-prompt -p "forward:" -i 'send -X search-forward-incremental "%%"'
bind -T copy-mode-vi  -N "Backward search"                ?       command-prompt -p "backward:" -i 'send -X search-backward-incremental "%%"'

bind -T copy-mode-vi  -N "Move to previous prompt"        [       send -X previous-prompt -o
bind -T copy-mode-vi  -N "Move to next prompt"            ]       send -X next-prompt -o

bind -T copy-mode-vi  -N "Scroll down by half a page"     d       send 'C-d'
bind -T copy-mode-vi  -N "Scroll up by half a page"       u       send 'C-u'

# better pane move
bind -T copy-mode-vi  -N "Navigate to left"           'C-h' if -F '#{pane_at_left}' '' 'selectp -L' 
bind -T copy-mode-vi  -N "Navigate to bottom"         'C-j' if -F '#{pane_at_bottom}' '' 'selectp -D' 
bind -T copy-mode-vi  -N "Navigate to top"            'C-k' if -F '#{pane_at_top}' '' 'selectp -U' 
bind -T copy-mode-vi  -N "Navigate to right"          'C-l' if -F '#{pane_at_right}' '' 'selectp -R' 
bind -T copy-mode-vi  -N "Navigate to last"           'C-/' selectp -Zl

bind -T copy-mode-vi  -N "Resize to left"             'C-S-H' resize-pane -L 5
bind -T copy-mode-vi  -N "Resize to bottom"           'C-S-J' resize-pane -D 5
bind -T copy-mode-vi  -N "Resize to top"              'C-S-K' resize-pane -U 5
bind -T copy-mode-vi  -N "Resize to right"            'C-S-L' resize-pane -R 5

bind -T copy-mode-vi  -N "Swap to left"             'C-M-h' swap-pane -s "{left-of}"
bind -T copy-mode-vi  -N "Swap to bottom"           'C-M-j' swap-pane -s "{down-of}"
bind -T copy-mode-vi  -N "Swap to top"              'C-M-k' swap-pane -s "{up-of}"
bind -T copy-mode-vi  -N "Swap to right"            'C-M-l' swap-pane -s "{right-of}"

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ resize ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
bind -T resize -N "Resize pane leftward"    h   resizep -L 5 \; switchc -T resize
bind -T resize -N "Resize pane rightward"   l   resizep -R 5 \; switchc -T resize
bind -T resize -N "Resize pane downward"    j   resizep -D 5 \; switchc -T resize
bind -T resize -N "Resize pane upward"      k   resizep -U 5 \; switchc -T resize
bind -T resize -N "Navigate to left pane"   C-h selectp -L \; switchc -T resize
bind -T resize -N "Navigate to right pane"  C-l selectp -R \; switchc -T resize
bind -T resize -N "Navigate to bottom pane" C-j selectp -D \; switchc -T resize
bind -T resize -N "Navigate to top pane"    C-k selectp -U \; switchc -T resize

bind -T resize -N 'Select even-horizontal layout'           | selectl even-horizontal           \; switchc -T resize
bind -T resize -N 'Select even-vertical layout'             _ selectl even-vertical             \; switchc -T resize
bind -T resize -N 'Select tiled layout'                     = selectl tiled                     \; switchc -T resize
bind -T resize -N 'Select main-vertical layout'             H selectl main-vertical             \; switchc -T resize
bind -T resize -N 'Select main-vertical-mirrored layout'    L selectl main-vertical-mirrored    \; switchc -T resize
bind -T resize -N 'Select main-horizontal layout'           K selectl main-horizontal           \; switchc -T resize
bind -T resize -N 'Select main-horizontal-mirrored layout'  J selectl main-horizontal-mirrored  \; switchc -T resize

bind -T resize -N "Select specific pane"    s displayp -b 'selectp -t%%'
bind -T resize -N "Select specific window"  S command-prompt -1p "window-id:" 'selectw -t%%'

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ kill ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
bind -T kill -N "Navigate to left pane"   h selectp -L \; switchc -T kill
bind -T kill -N "Navigate to right pane"  l selectp -R \; switchc -T kill
bind -T kill -N "Navigate to bottom pane" j selectp -D \; switchc -T kill
bind -T kill -N "Navigate to top pane"    k selectp -U \; switchc -T kill

bind -T kill -N "Kill current pane"     x killp \; switchc -T kill
bind -T kill -N "Kill current window"   X killw \; switchc -T kill

bind -T kill -N "Kill all panes"        o killp -a \; switchc -T kill
bind -T kill -N "Kill all windows"      O killw -a \; switchc -T kill

bind -T kill -N "Kill specific pane"    s displayp -b 'killp -t%%' \; switchc -T kill
bind -T kill -N "Kill specific window"  S command-prompt -1p "window-id:" 'killw -t%%' \; switchc -T kill

# See: https://man.openbsd.org/OpenBSD-current/man1/tmux.1#KEY_BINDINGS
# }}}

#######################################################################
#                                                                     #
#                             aliases                                 #
#                                                                     #
#######################################################################
# {{{
set -s  command-alias reload='source ~/.config/tmux/tmux.conf'
set -sa command-alias zoom='resizep -Z'
set -sa command-alias mark='selectp -m'
set -sa command-alias unmark='selectp -M'

set -sa command-alias skt='switch -T'

set -sa command-alias tpm='run ~/.config/tmux/scripts/tpm'
# }}}

#######################################################################
#                                                                     #
#                             hooks                                   #
#                                                                     #
#######################################################################
# {{{
set-hook -g after-new-window { 
    if -F '#{e|>:#{session_windows},1}' 'set status on' ''
}
set-hook -g window-unlinked {
    if -F '#{e|<=:#{session_windows},1}' 'set status off' ''
}

set-hook -g after-split-window  {
    if -F '#{e|>:#{window_panes},1}' 'set pane-border-status top' ''
}
# kill-pane 
set-hook -g after-kill-pane     {
    if -F '#{e|<=:#{window_panes},1}' 'set pane-border-status off' ''
}
# 程序退出
set-hook -g pane-exited {
    if -F '#{e|<=:#{window_panes},1}' 'set pane-border-status off' ''
}

set-hook -g after-resize-pane { 
    if -F '#{window_zoomed_flag}' { 
        set -wF @window_zoomed_pane_border_status '#{pane-border-status}'
        set pane-border-status off
  } {
    if -F '#{@window_zoomed_pane_border_status}' {
        set -F pane-border-status '#{@window_zoomed_pane_border_status}'
        set -uw @window_zoomed_pane_border_status
    }
  }
}

set-hook -g session-created {
    if -F '#{m:float-*,#{hook_session_name}}' '' { run -bC 'set -t #{hook_session_name} -F @float-session-name float-#{hook_session_name}' }
}

set-hook -g session-closed {
    # 关闭与会话名称相关的浮动会话而不是@float-session-name。此时，我们可以修改@dfloat-session-name来实现多个sessions共享浮动会话，需要手动管理。
    if -F '#{N/s:float-#{hook_session_name}}' { run -bC 'kill-session -t float-#{hook_session_name}' }
}

set-hook -g session-renamed {
    if -F '#{m:float-*,#{hook_session_name}}' '' {
        if -F '#{m:float-*,#{@float-session-name}}' {
            if -F '#{N/s:#{@float-session-name}}' { run -bC 'rename-session -t #{@float-session-name} float-#{hook_session_name}' } ''
            run -bC 'set -t #{hook_session_name} -F @float-session-name float-#{hook_session_name}' 
        } ''
    }
}

# See: https://man.openbsd.org/OpenBSD-current/man1/tmux.1#HOOKS
# }}}

# vim: set shiftwidth=4 foldmethod=marker :
